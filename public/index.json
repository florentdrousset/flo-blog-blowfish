[{"content":"","date":"19 août 2023","permalink":"/","section":"Florent Drousset","summary":"","title":"Florent Drousset"},{"content":" Préambule # Pour rappel :\nune image Docker est un template contenant des instructions pour créer un container Docker un fichier Dockerfile permet de définir ces instructions afin de créer une image Docker une image Docker peut comporter plusieurs layers et commence toujours avec un layer de base Pour notre premier test, nous allons utiliser une image de la distro Linux Alpine comme image de base et y installer vim. La première instruction de notre Dockerfile (nommé Dockerfile) sera donc :\nFROM alpine:latest En effet, une image peut être (et sera la plupart du temps) basée sur une autre image. En l\u0026rsquo;occurence, nous nous basons sur la dernière version de Alpine. Si nous souhaitions utiliser une version spécifique, on pourrait alors écrire alpine:3.15.10 (par exemple).\nLa prochaine instruction sera\nRUN apk update \u0026amp;\u0026amp; \\ apk add vim L\u0026rsquo;instruction RUN va créer un nouveau layer Docker et exécuter l\u0026rsquo;instruction passée en paramètre. En l\u0026rsquo;occurence, les instructions executées seront apk update et apk add vim.\nConstruction de l\u0026rsquo;image # Pour constuire une image à partir de notre Dockerfile, on utilisera docker build. docker build requiert à minima un contexte : en l\u0026rsquo;occurence le dossier dans lequel se trouve le Dockerfile. On utilisera également le flag -t afin de tagger notre image avec un nom pour des raisons de praticité.\ndocker build -t dockerfile-tutorial . Docker va donc build notre image. Pour vérifier si l\u0026rsquo;image a bien été créée :\ndocker images Retour console :\nREPOSITORY TAG IMAGE ID CREATED SIZE dockerfile-tutorial latest 4f21a4e055d1 40 hours ago 41.4MB Construction du container # Bien ! Nous avons notre image, nous pouvons à présent créer un container à partir de celle-ci. Le container sera une instance de notre image qui n\u0026rsquo;est, encore une fois, qu\u0026rsquo;un modèle ou template permettant de créer des containers Docker. Pour run un container à partir de notre image :\ndocker run --rm -ti dockerfile-tutorial /bin/sh Analysons cette commande :\ndocker run : lance un conteneur Docker à partir d\u0026rsquo;une image spécifiée (en l\u0026rsquo;occurence, dockerfile-tutorial)\n--rm: indique à Docker de supprimer automatiquement le conteneur une fois qu\u0026rsquo;il est arrêté. Sans cette option, on devrait manuellement supprimer le conteneur à coup de docker rm après l\u0026rsquo;avoir arrêté.\n-ti: -t alloue un pseudo-TTY : le container sera run avec un terminal interactif. -i : Permet de garder STDIN ouvert, afin de pouvoir interagir avec le container en direct.\nSi tout s\u0026rsquo;est bien passé, vous devriez être gratifié d\u0026rsquo;un :\n/ # Vous voilà donc connecté au terminal de votre nouveau container basé sur l\u0026rsquo;image alpine. Comme nous avions spécifié l\u0026rsquo;installation de vim dans le Dockerfile, nous pouvons tester si celui-ci fonctionne bien :\nvim Nous voilà sur vim, lancé depuis notre nouveau container construit à partir du Dockefile que nous avons écrit. :q + entrée pour quitter vim, et taper exit pour quitter le container.\ndocker ps permet de lister tous les containers actifs. Comme nous venons de quitter notre container, celui-ci ne devrait pas apparaître dans cette liste.\nUn mot sur les layers # Chaque instruction de notre Dockerfile construit un nouveau layer au-dessus du précédent. Ceux-ci sont automatiquement mis en cache par Docker lors du build : Docker essayera toujours de récupérer un layer en cache après avoir vérifié si celui-ci a été modifié.\nSi un layer a changé depuis le dernier build, tous les layers suivants seront rebuild. L\u0026rsquo;optimisation du cache dans Docker fera probablement l\u0026rsquo;objet d\u0026rsquo;un article à part entière, mais vous pouvez vous référer à l\u0026rsquo;article dédié dans la documentation officielle de Docker.\nReprenons le retour console lorsque que nous exécutons la commande docker build -t dockerfile-tutorial . :\n[+] Building 0.4s (7/7) FINISHED =\u0026gt; [internal] load build definition from Dockerfile 0.0s =\u0026gt; =\u0026gt; transferring dockerfile: 88B 0.0s =\u0026gt; [internal] load .dockerignore 0.0s =\u0026gt; =\u0026gt; transferring context: 2B 0.0s =\u0026gt; [internal] load metadata for docker.io/library/alpine:latest 0.4s =\u0026gt; [1/3] FROM docker.io/library/alpine:latest@sha256:7144f7bab3d4c2648d7e59409f15ec52a18006a128c733fcff20d3a4a54ba44a 0.0s =\u0026gt; CACHED [2/3] RUN apk update 0.0s =\u0026gt; CACHED [3/3] RUN apk add vim 0.0s =\u0026gt; exporting to image 0.0s =\u0026gt; =\u0026gt; exporting layers 0.0s =\u0026gt; =\u0026gt; writing image sha256:011e7455dac2771e18a365a9e9fae2951eb199c7f0b901b7b2cbb60ef5cdaa68 0.0s =\u0026gt; =\u0026gt; naming to docker.io/library/dockerfile-tutorial On peut constater que 3 layers ont été lancés : 1 - le layer de base : l\u0026rsquo;image alpine:latest 2 - l\u0026rsquo;instruction RUN apk update (récupérée du cache) 3 - l\u0026rsquo;instruction RUN apk add vim (également récupérée du cache)\nAvoir une bonne compréhension des layers est important pour comprendre la construction des images Docker.\nVers des images plus complexes # Bien, nous savons désormais nous baser sur une image pré-existante avec l\u0026rsquo;instruction FROM et exécuter des commandes avec l\u0026rsquo;instruction RUN. Prenons un nouvel exemple et essayons de nous lancer dans une création d\u0026rsquo;image plus complexe : l\u0026rsquo;installation du framework PHP Symfony.\nVoici le fichier Dockerfile complet :\nFROM php:8.0-apache RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ libpng-dev \\ libjpeg62-turbo-dev \\ libxml2-dev \\ libicu-dev \\ git \\ unzip RUN docker-php-ext-configure gd --with-jpeg=/usr/include/ \\ \u0026amp;\u0026amp; docker-php-ext-install gd pdo pdo_mysql opcache intl RUN a2enmod rewrite RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer WORKDIR /var/www/html RUN composer create-project symfony/skeleton my_project_name ENV APACHE_DOCUMENT_ROOT /var/www/html/my_project_name/public RUN sed -ri -e \u0026#39;s!/var/www/html!${APACHE_DOCUMENT_ROOT}!g\u0026#39; /etc/apache2/sites-available/*.conf EXPOSE 80 CMD [\u0026#34;apache2-foreground\u0026#34;] Sont ici présentes 4 instructions Dockerfile que nous n\u0026rsquo;avons pas encore vues : WORKDIR, ENV, EXPOSE et CMD.\nReprenons les différentes instructions une par une.\nNous commencons par nous baser sur l\u0026rsquo;image officielle de php-apache. Les deux RUN suivants installent toutes les librairies requises pour l\u0026rsquo;installation de Symfony, suivi d\u0026rsquo;une modification de config du serveur Apache (RUN a2enmod rewrite).\nWORKDIR définit simplement le dossier dans lequel les commandes suivantes seront exécutées. Il est l\u0026rsquo;équivalent du cd, à ceci près qu\u0026rsquo;il créera le dossier (donc également équivalent du mkdir) si celui-ci n\u0026rsquo;existe pas déjà !\nENV permet de définir une variable d\u0026rsquo;environnement qui pourra être réutilisée par la majeure partie des instructions Dockerfile.\nENV APACHE_DOCUMENT_ROOT /var/www/html/my_project_name/public Une autre syntaxe existe : ENV nom_de_variable=\u0026quot;valeur\u0026quot;\nIci, la variable d\u0026rsquo;environnement APACHE_DOCUMENT_ROOT définie après ENV est réutilisée comme ceci : ${APACHE_DOCUMENT_ROOT}. Note : dans certains cas, on préfèrera utiliser l\u0026rsquo;instruction ARG qui permet de définir des variables utilisées uniquement au moment du build et qui ne seront pas persistées dans le container.\nEXPOSE informe Docker que le container devra écouter sur le port spécifié. EXPOSE est configuré en TCP par défaut, mais on peut lui spécifier d\u0026rsquo;utiliser le protocole UDP si nécessaire :\nEXPOSE 80/udp CMD définit la commande executée par défaut lorsque le container est lancé. Il ne peut y avoir qu\u0026rsquo;une seule instruction CMD par Dockerfile ! (Notez que si plusieurs sont présentes, seule la dernière sera executée.) Il est possible de surcharger CMD au moment du run avec la syntaxe suivante : docker run $image $autre_commande\nEt voilà ! On peut donc build notre image, puis lancer le container :\ndocker build -t test-symfony . docker run -p 8080:80 test-symfony -p nous permet de spéficier les ports utilisés par notre container. Le premier nombre définit le port utilisé physiquement sur votre machine, et le lie au deuxième nombre qui définit le port utilisé dans le container. Rendez-vous sur localhost:8080 pour voir la page d\u0026rsquo;accueil de Symfony.\nCet article n\u0026rsquo;était qu\u0026rsquo;une introduction aux fichiers Dockerfile qui ne fait qu\u0026rsquo;effleurer les possibilités de la construction d\u0026rsquo;image Docker. La deuxième partie suivra bientôt pour aborder d\u0026rsquo;autres notions importantes.\n","date":"19 août 2023","permalink":"/posts/dockerfile-basics/","section":"Posts","summary":"Préambule # Pour rappel :","title":"Les bases de Dockerfile - Partie I"},{"content":"","date":"19 août 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"1 janvier 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 janvier 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 janvier 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"1 janvier 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]